package cn.com.bonc.GUI;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;

public class CaptureGUI extends JPanel implements ActionListener, ItemListener, TextListener {
    public static String[] deviceNameComboValue;
    public static String[] netWorkComboValue;
    public static int capturedAppNum = 0;
    public static int failAppNum = 0;
    public static long capturedTotalPkgs = 0l;
    public static JTextArea textArea_log;
    public static boolean stopFlag = true;
    public static int capturedTotalCount;
    public static JFrame frame;

    /**
     * Creates new form Capture_Main
     */
    public CaptureGUI() {
        initComponents();
    }

    /**
     * Create the GUI and show it. For thread safety, this method should be
     * invoked from the event-dispatching thread.
     */
    private static void createAndShowGUI() {

        Font f = new Font("微软雅黑", 0, 12);
        String names[] = {"Label", "CheckBox", "PopupMenu", "MenuItem", "CheckBoxMenuItem",
                "JRadioButtonMenuItem", "ComboBox", "Button", "Tree", "ScrollPane",
                "TabbedPane", "EditorPane", "TitledBorder", "Menu", "TextArea",
                "OptionPane", "MenuBar", "ToolBar", "ToggleButton", "ToolTip",
                "ProgressBar", "TableHeader", "Panel", "List", "ColorChooser",
                "PasswordField", "TextField", "Table", "Label", "Viewport",
                "RadioButtonMenuItem", "RadioButton", "DesktopPane", "InternalFrame"
        };
        for (String item : names) {
            UIManager.put(item + ".font", f);
        }
        //Create and set up the window.
        frame = new JFrame("AutoCaptureTool");
        String src = "baifeng2.png";
        Image image = null;
        try {
            image = ImageIO.read(new CaptureGUI().getClass().getResource(src));
        } catch (IOException e) {
            e.printStackTrace();
        }
        frame.setIconImage(image);
        //frame.setIconImage(Toolkit.getDefaultToolkit().getImage(src));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        frame.setLocation(Toolkit.getDefaultToolkit().getScreenSize().width / 2 - 500 / 2,
                Toolkit.getDefaultToolkit().getScreenSize().height / 2 - 450 / 2);

        frame.getContentPane().add(new CaptureGUI());

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    /**
     * main
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        panel_paraConfig = new JPanel();
        label_deviceName = new JLabel();
        comboBox_deviceName = new JComboBox<>();
        label_networkDriver = new JLabel();
        label_inputType = new JLabel();
        comboBox_inputType = new JComboBox<>();
        button_chooseInputFile = new JButton();
        fileChooser_inputFile = new JFileChooser();
        fileChooser_outputFolder = new JFileChooser();
        textField_inputFile = new JTextField();
        label_outputFolder = new JLabel();
        textField_outputFolder = new JTextField();
        button_chooseOutputFolder = new JButton();
        panel_ctrl = new JPanel();
        button_startup = new JButton();
        button_continue = new JButton();
        button_stop = new JButton();
        panel_monitor = new JPanel();
        jScrollPane1 = new JScrollPane();
        textArea_log = new JTextArea();
        label_num1 = new JLabel();
        textField_Num1 = new JTextField();
        label_unit1 = new JLabel();
        label_num2 = new JLabel();
        textField_Num2 = new JTextField();
        label_unit2 = new JLabel();
        textField_Num3 = new JTextField();
        label_num3 = new JLabel();
        label_unit3 = new JLabel();

        setMaximumSize(new Dimension(520, 450));
        setMinimumSize(new Dimension(520, 450));
        setPreferredSize(new Dimension(520, 450));

        panel_paraConfig.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "参数配置", TitledBorder.LEFT, TitledBorder.DEFAULT_POSITION, new Font("微软雅黑", 0, 12))); // NOI18N

        label_deviceName.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_deviceName.setText("设备名称：");

        //重画comboBox_deviceName
        new getDeviceName().getComboBoxValue();
        //System.out.println(deviceNameComboValue[0]+"\n");
        intArray = new Integer[deviceNameComboValue.length];
        for (int i = 0; i < deviceNameComboValue.length; i++) {
            intArray[i] = new Integer(i);
        }
        comboBox_deviceName = new JComboBox(intArray);
        renderer = new ComboBoxRenderer(deviceNameComboValue);

        renderer.setPreferredSize(new Dimension(150, 23));
        comboBox_deviceName.setMaximumRowCount(3);
        comboBox_deviceName.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        //comboBox_deviceName.setModel(new DefaultComboBoxModel<>(deviceNameComboValue));
        comboBox_deviceName.setName("comboBox_deviceName");
        comboBox_deviceName.setRenderer(renderer);
        //comboBox_deviceName.addActionListener(new ComboBoxDeviceNameAction());
        comboBox_deviceName.addActionListener(this);
        comboBox_deviceName.addItemListener(this);
        //comboBox_deviceName.addMouseListener(this);
        //comboBox_deviceName.addFocusListener(this);

        label_networkDriver.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_networkDriver.setText("网卡驱动：");


        //重画comboBox_networkDriver
        new getNetworkDriver().getComboBoxValue();
        intArray = new Integer[netWorkComboValue.length];
        for (int i = 0; i < netWorkComboValue.length; i++) {
            intArray[i] = new Integer(i);
        }
        comboBox_networkDriver = new JComboBox(intArray);
        renderer = new ComboBoxRenderer(netWorkComboValue);

        renderer.setPreferredSize(new Dimension(150, 23));
        comboBox_networkDriver.setMaximumRowCount(3);
        comboBox_networkDriver.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        comboBox_networkDriver.setName("comboBox_networkDriver");
        comboBox_networkDriver.setRenderer(renderer);
        //comboBox_networkDriver.addActionListener(new ComboBoxNetworkAction());
        comboBox_networkDriver.addActionListener(this);
        comboBox_networkDriver.addItemListener(this);

        label_inputType.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_inputType.setText("输入类型：");

        comboBox_inputType.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        comboBox_inputType.setModel(new DefaultComboBoxModel<>(new String[]{"文件(*.txt)"}));
        comboBox_inputType.setName("comboBox_inputType");
        comboBox_inputType.addActionListener(this);

        button_chooseInputFile.setBackground(new Color(51, 102, 255));
        button_chooseInputFile.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        button_chooseInputFile.setForeground(new Color(255, 255, 255));
        button_chooseInputFile.setText("选择");
        button_chooseInputFile.setName("button_chooseInputFile");
        button_chooseInputFile.addActionListener(this);

        fileChooser_inputFile.setFileSelectionMode(JFileChooser.FILES_ONLY);

        textField_inputFile.setEditable(false);
        textField_inputFile.setFont(new Font("微软雅黑", 2, 12)); // NOI18N
        textField_inputFile.setMaximumSize(new Dimension(150, 26));
        textField_inputFile.setMinimumSize(new Dimension(150, 26));
        textField_inputFile.setPreferredSize(new Dimension(150, 26));
        textField_inputFile.setForeground(Color.gray);
        textField_inputFile.setText("[请选择数据源]");
        textField_inputFile.setName("textField_inputFile");

        label_outputFolder.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_outputFolder.setText("输出路径：");

        textField_outputFolder.setEditable(false);
        textField_outputFolder.setFont(new Font("微软雅黑", 2, 12)); // NOI18N
        textField_outputFolder.setMaximumSize(new Dimension(150, 26));
        textField_outputFolder.setMinimumSize(new Dimension(150, 26));
        textField_outputFolder.setPreferredSize(new Dimension(150, 26));
        textField_outputFolder.setForeground(Color.gray);
        textField_outputFolder.setText("[请选择文件输出目录]");
        textField_outputFolder.setName("textField_outputFolder");

        button_chooseOutputFolder.setBackground(new Color(51, 102, 255));
        button_chooseOutputFolder.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        button_chooseOutputFolder.setForeground(new Color(255, 255, 255));
        button_chooseOutputFolder.setText("选择");
        button_chooseOutputFolder.setName("button_chooseOutputFolder");
        button_chooseOutputFolder.addActionListener(this);

        fileChooser_outputFolder.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        GroupLayout panel_paraConfigLayout = new GroupLayout(panel_paraConfig);
        panel_paraConfig.setLayout(panel_paraConfigLayout);
        panel_paraConfigLayout.setHorizontalGroup(
                panel_paraConfigLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panel_paraConfigLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addGroup(panel_paraConfigLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                        .addGroup(panel_paraConfigLayout.createSequentialGroup()
                                                .addComponent(label_outputFolder)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(textField_outputFolder, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(panel_paraConfigLayout.createSequentialGroup()
                                                .addComponent(label_inputType)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comboBox_inputType, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(panel_paraConfigLayout.createSequentialGroup()
                                                .addComponent(label_deviceName)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comboBox_deviceName, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)))
                                .addGap(10, 10, 10)
                                .addGroup(panel_paraConfigLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(panel_paraConfigLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(panel_paraConfigLayout.createSequentialGroup()
                                                        .addComponent(label_networkDriver)
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(comboBox_networkDriver, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE))
                                                .addGroup(panel_paraConfigLayout.createSequentialGroup()
                                                        .addComponent(textField_inputFile, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(button_chooseInputFile)))
                                        .addComponent(button_chooseOutputFolder))
                                .addContainerGap(36, Short.MAX_VALUE))
        );
        panel_paraConfigLayout.setVerticalGroup(
                panel_paraConfigLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panel_paraConfigLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panel_paraConfigLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_deviceName)
                                        .addComponent(label_networkDriver)
                                        .addComponent(comboBox_networkDriver, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(comboBox_deviceName, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panel_paraConfigLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_inputType)
                                        .addComponent(button_chooseInputFile)
                                        .addComponent(textField_inputFile, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(comboBox_inputType))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panel_paraConfigLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_outputFolder)
                                        .addComponent(button_chooseOutputFolder)
                                        .addComponent(textField_outputFolder, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        panel_ctrl.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));

        button_startup.setBackground(new Color(51, 102, 255));
        button_startup.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        button_startup.setForeground(new Color(255, 255, 255));
        button_startup.setText("开始");
        button_startup.setName("button_startup");
        /*button_startup.addActionListener(new StartUpAction(comboBox_deviceName.getSelectedItem().toString(),
                comboBox_networkDriver.getSelectedItem().toString(),
                textField_inputFile.getText(),
                textField_outputFolder.getText()));*/
        button_startup.addActionListener(this);

        button_continue.setBackground(new Color(51, 102, 255));
        button_continue.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        button_continue.setForeground(new Color(255, 255, 255));
        button_continue.setText("继续");
        button_continue.setEnabled(false);
        button_continue.setName("button_continue");
        button_continue.addActionListener(this);

        button_stop.setBackground(java.awt.Color.red);
        button_stop.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        button_stop.setForeground(new Color(255, 255, 255));
        button_stop.setText("暂停");
        button_stop.setEnabled(false);
        button_stop.setName("button_stop");
        button_stop.addActionListener(this);

        GroupLayout panel_ctrlLayout = new GroupLayout(panel_ctrl);
        panel_ctrl.setLayout(panel_ctrlLayout);
        panel_ctrlLayout.setHorizontalGroup(
                panel_ctrlLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, panel_ctrlLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(button_startup)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button_continue)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(button_stop)
                                .addContainerGap())
        );
        panel_ctrlLayout.setVerticalGroup(
                panel_ctrlLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panel_ctrlLayout.createSequentialGroup()
                                .addGroup(panel_ctrlLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(button_startup)
                                        .addComponent(button_continue)
                                        .addComponent(button_stop))
                                .addGap(0, 1, Short.MAX_VALUE))
        );

        panel_monitor.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(0, 0, 0)), "运行监控", TitledBorder.LEFT, TitledBorder.DEFAULT_POSITION, new Font("微软雅黑", 0, 12))); // NOI18N

        jScrollPane1.setHorizontalScrollBar(null);

        textArea_log.setEditable(false);
        textArea_log.setColumns(20);
        textArea_log.setLineWrap(true);
        textArea_log.setRows(5);
        jScrollPane1.setViewportView(textArea_log);

        label_num1.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_num1.setText("已抓取的App数量：");

        textField_Num1.setEditable(false);
        textField_Num1.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        textField_Num1.setHorizontalAlignment(JTextField.RIGHT);

        label_unit1.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_unit1.setText("个");

        label_num2.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_num2.setText("抓取失败的App数量：");

        textField_Num2.setEditable(false);
        textField_Num2.setFont(new Font("微软雅黑", 0, 12)); // NOI18N\
        textField_Num2.setHorizontalAlignment(JTextField.RIGHT);

        label_unit2.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_unit2.setText("个");

        textField_Num3.setEditable(false);
        textField_Num3.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        textField_Num3.setHorizontalAlignment(JTextField.RIGHT);

        label_num3.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_num3.setText("数据包总量：");

        label_unit3.setFont(new Font("微软雅黑", 0, 12)); // NOI18N
        label_unit3.setText("个");

        GroupLayout panel_monitorLayout = new GroupLayout(panel_monitor);
        panel_monitor.setLayout(panel_monitorLayout);
        panel_monitorLayout.setHorizontalGroup(
                panel_monitorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panel_monitorLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 297, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panel_monitorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(panel_monitorLayout.createSequentialGroup()
                                                .addGroup(panel_monitorLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(textField_Num3, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(label_num3, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(label_unit3)
                                                .addGap(22, 22, 22))
                                        .addGroup(GroupLayout.Alignment.TRAILING, panel_monitorLayout.createSequentialGroup()
                                                .addGroup(panel_monitorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(GroupLayout.Alignment.TRAILING, panel_monitorLayout.createSequentialGroup()
                                                                .addComponent(textField_Num2, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(label_unit2))
                                                        .addGroup(GroupLayout.Alignment.TRAILING, panel_monitorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                .addComponent(label_num2)
                                                                .addGroup(panel_monitorLayout.createSequentialGroup()
                                                                        .addComponent(textField_Num1, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)
                                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(label_unit1))
                                                                .addComponent(label_num1)))
                                                .addGap(24, 24, 24))))
        );
        panel_monitorLayout.setVerticalGroup(
                panel_monitorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(panel_monitorLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panel_monitorLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(panel_monitorLayout.createSequentialGroup()
                                                .addComponent(label_num1)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(panel_monitorLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(textField_Num1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(label_unit1))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(label_num2)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(panel_monitorLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(textField_Num2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(label_unit2))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(label_num3)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(panel_monitorLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                                        .addComponent(textField_Num3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(label_unit3))
                                                .addGap(0, 45, Short.MAX_VALUE))
                                        .addComponent(jScrollPane1))
                                .addContainerGap())
        );

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(panel_paraConfig, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(panel_monitor, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(panel_ctrl, GroupLayout.PREFERRED_SIZE, 209, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(panel_paraConfig, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panel_ctrl, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panel_monitor, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
    }// </editor-fold>

    public void actionPerformed(ActionEvent evt) {
        //System.out.println(evt.getActionCommand());
        //System.out.println(evt.getSource());
        String deviceName = "";
        String networkName = "";
        String dataSource = "";
        String dataDestination = "";
        JComboBox comboMsg = null;
        JButton btnMsg = null;
        if (evt.getSource() == comboBox_deviceName) {
            comboMsg = (JComboBox) evt.getSource();
            deviceName = comboMsg.getSelectedItem().toString();
        }
        if (evt.getSource() == comboBox_networkDriver) {
            comboMsg = (JComboBox) evt.getSource();
            networkName = comboMsg.getItemAt(0).toString();
        }
        if (evt.getSource() == comboBox_inputType) {
            comboMsg = (JComboBox) evt.getSource();
        }
        if (evt.getSource() == button_chooseInputFile) {
            btnMsg = (JButton) evt.getSource();

            //fileChooser_inputFile.setFont(new Font("宋体", 0, 12));
            int returnVal = fileChooser_inputFile.showOpenDialog(CaptureGUI.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser_inputFile.getSelectedFile();
                textField_inputFile.setForeground(Color.black);
                //This is where a real application would open the file.
                textField_inputFile.setFont(new Font("微软雅黑", 0, 12));
                textField_inputFile.setText(file.getAbsolutePath());

                if (!input_current_value.equals(file.getAbsolutePath())) {
                    if (button_continue.isEnabled() == true)
                        button_continue.setEnabled(false);
                } else {
                    if (button_continue.isEnabled() == false
                            && comboBox_deviceName.getSelectedItem().toString().equals(device_current_value)
                            && comboBox_networkDriver.getSelectedItem().toString().equals(network_current_value)
                            && textField_outputFolder.getText().equals(output_current_value)) {
                        button_continue.setEnabled(true);
                    }
                }

            } else {
                //System.out.println("Open command cancelled by user.");
            }
        }
        if (evt.getSource() == button_chooseOutputFolder) {
            btnMsg = (JButton) evt.getSource();
            fileChooser_outputFolder.setFont(new Font("微软雅黑", 0, 12));
            int returnVal = fileChooser_outputFolder.showOpenDialog(CaptureGUI.this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser_outputFolder.getSelectedFile();
                textField_outputFolder.setForeground(Color.black);
                textField_outputFolder.setFont(new Font("微软雅黑", 0, 12));
                //This is where a real application would open the file.
                textField_outputFolder.setText(file.getAbsolutePath());

                if (!output_current_value.equals(file.getAbsolutePath())) {
                    if (button_continue.isEnabled() == true)
                        button_continue.setEnabled(false);
                } else {
                    if (button_continue.isEnabled() == false
                            && comboBox_deviceName.getSelectedItem().toString().equals(device_current_value)
                            && comboBox_networkDriver.getSelectedItem().toString().equals(network_current_value)
                            && textField_inputFile.getText().equals(input_current_value)) {
                        button_continue.setEnabled(true);
                    }
                }
            } else {
                //System.out.println("Open command cancelled by user.");
            }
        }
        if (evt.getSource() == button_startup) {

            if ("[请选择数据源]".equals(textField_inputFile.getText())
                    || "[请选择文件输出目录]".equals(textField_outputFolder.getText())
                    || "<无>".equals(netWorkComboValue[0])
                    || "<无>".equals(deviceNameComboValue[0])) {
                msg = new JLabel("请检查参数配置是否正确!");
                msg.setFont(new Font("微软雅黑", 0, 13));
                JOptionPane.showMessageDialog(frame, msg, "Warn", JOptionPane.WARNING_MESSAGE);
                return;
            }

            button_startup.setEnabled(false);
            button_continue.setEnabled(false);
            button_stop.setEnabled(true);
            textField_Num1.setText(String.valueOf(0));
            textField_Num2.setText(String.valueOf(0));
            textField_Num3.setText(String.valueOf(0));
            capturedAppNum = 0;
            failAppNum = 0;
            capturedTotalPkgs = 0l;
            capturedTotalCount = 0;
            textArea_log.setText("");

            device_current_value = deviceNameComboValue[comboBox_deviceName.getSelectedIndex()];
            network_current_value = comboBox_networkDriver.getSelectedItem().toString();
            input_current_value = textField_inputFile.getText();
            output_current_value = textField_outputFolder.getText();
            Thread th1 = new StartUpAction(device_current_value,
                    network_current_value,
                    input_current_value,
                    output_current_value);
            th1.start();
            th2 = new Thread(new Runnable() {
                @Override
                public void run() {
                    while (true) {
                        try {
                            Thread.sleep(10 * 1000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        textField_Num1.setText(String.valueOf(capturedAppNum));
                        textField_Num2.setText(String.valueOf(failAppNum));
                        textField_Num3.setText(String.valueOf(capturedTotalPkgs));
                        if ("TERMINATED".equals(th1.getState().toString())) {
                            if (stopFlag) {
                                textArea_log.append("INFO:抓包程序结束···\n");
                                button_startup.setEnabled(true);
                                button_stop.setEnabled(false);
                            } else {
                                textArea_log.append("INFO:抓包程序终止···\n");
                            }
                            break;
                        }
                    }
                }
            });
            th2.start();
        }
        if (evt.getSource() == button_continue) {
            if ("[请选择数据源]".equals(textField_inputFile.getText())
                    || "[请选择文件输出目录]".equals(textField_outputFolder.getText())
                    || "<无>".equals(netWorkComboValue[0])
                    || "<无>".equals(deviceNameComboValue[0])) {
                msg = new JLabel("请检查参数配置是否正确!");
                msg.setFont(new Font("微软雅黑", 0, 13));
                JOptionPane.showMessageDialog(frame, msg, "Warn", JOptionPane.WARNING_MESSAGE);
                return;
            }

            button_startup.setEnabled(false);
            button_continue.setEnabled(false);
            button_stop.setEnabled(true);
            capturedTotalCount = Integer.valueOf(textField_Num1.getText().trim()) +
                    Integer.valueOf(textField_Num2.getText().trim());

            Thread th1 = new StartUpAction(deviceNameComboValue[comboBox_deviceName.getSelectedIndex()],
                    comboBox_networkDriver.getSelectedItem().toString(),
                    textField_inputFile.getText(),
                    textField_outputFolder.getText());
            th1.start();

            th2 = new Thread(new Runnable() {
                @Override
                public void run() {
                    while (true) {
                        try {
                            Thread.sleep(10 * 1000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        textField_Num1.setText(String.valueOf(capturedAppNum));
                        textField_Num2.setText(String.valueOf(failAppNum));
                        textField_Num3.setText(String.valueOf(capturedTotalPkgs));
                        if ("TERMINATED".equals(th1.getState().toString())) {
                            if (stopFlag) {
                                textArea_log.append("INFO:抓包程序结束···\n");
                                button_startup.setEnabled(true);
                                button_stop.setEnabled(false);
                            } else {
                                textArea_log.append("INFO:抓包程序终止···\n");
                            }
                            break;
                        }
                    }
                }
            });
            th2.start();
        }
        if (evt.getSource() == button_stop) {
            msg = new JLabel("您确定暂停抓包吗?");
            msg.setFont(new Font("微软雅黑", 0, 13));
            int n = JOptionPane.showConfirmDialog(frame, msg, "query", JOptionPane.OK_CANCEL_OPTION);
            if (n == JOptionPane.CANCEL_OPTION) {
                return;
            }
            Thread th3 = new Thread(new Runnable() {
                @Override
                public void run() {
                    textArea_log.append("INFO:抓包程序暂停中···\n");
                    button_stop.setEnabled(false);

                    stopFlag = false;
                    while (true) {
                        try {
                            Thread.sleep(5 * 1000);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        if ("TERMINATED".equals(th2.getState().toString())) {
                            msg = new JLabel("自动抓包操作已暂停!");
                            msg.setFont(new Font("微软雅黑", 0, 13));
                            JOptionPane.showMessageDialog(frame,
                                    msg, "tip", JOptionPane.INFORMATION_MESSAGE);
                            button_startup.setEnabled(true);
                            button_continue.setEnabled(true);
                            break;
                        }
                    }
                    stopFlag = true;

                }
            });
            th3.start();
        }
    }

    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() == comboBox_deviceName) {
            if (!comboBox_deviceName.getSelectedItem().toString().equals(device_current_value)
                    ) {
                if (button_continue.isEnabled() == true) {
                    button_continue.setEnabled(false);
                }
            } else {
                if (button_continue.isEnabled() == false
                        && comboBox_networkDriver.getSelectedItem().toString().equals(network_current_value)
                        && textField_inputFile.getText().equals(input_current_value)
                        && textField_outputFolder.getText().equals(output_current_value)) {
                    button_continue.setEnabled(true);
                }
            }
        }
        if (e.getSource() == comboBox_networkDriver) {
            if (!comboBox_networkDriver.getSelectedItem().toString().equals(network_current_value)) {
                if (button_continue.isEnabled() == true) {
                    button_continue.setEnabled(false);
                }
            } else {
                if (button_continue.isEnabled() == false
                        && comboBox_deviceName.getSelectedItem().toString().equals(device_current_value)
                        && textField_inputFile.getText().equals(input_current_value)
                        && textField_outputFolder.getText().equals(output_current_value)) {
                    button_continue.setEnabled(true);
                }
            }
        }

    }

    public void textValueChanged(TextEvent e) {

    }


    // Variables declaration - do not modify
    private JButton button_chooseInputFile;
    private JButton button_chooseOutputFolder;
    private JFileChooser fileChooser_inputFile;
    private JFileChooser fileChooser_outputFolder;
    private JButton button_continue;
    private JButton button_startup;
    private JButton button_stop;
    private JComboBox<String> comboBox_deviceName;
    private JComboBox<String> comboBox_networkDriver;
    private JComboBox<String> comboBox_inputType;
    private JScrollPane jScrollPane1;
    private JLabel label_deviceName;
    private JLabel label_inputType;
    private JLabel label_networkDriver;
    private JLabel label_num1;
    private JLabel label_num2;
    private JLabel label_num3;
    private JLabel label_outputFolder;
    private JLabel label_unit1;
    private JLabel label_unit2;
    private JLabel label_unit3;
    private JPanel panel_ctrl;
    private JPanel panel_monitor;
    private JPanel panel_paraConfig;
    private JTextField textField_Num1;
    private JTextField textField_Num2;
    private JTextField textField_Num3;
    private JTextField textField_inputFile;
    private JTextField textField_outputFolder;
    private ComboBoxRenderer renderer;
    private Integer[] intArray;
    //private JFrame frame;
    private JLabel msg;
    private Thread th2;
    private String device_current_value = "";
    private String network_current_value = "";
    private String input_current_value = "";
    private String output_current_value = "";
}
